package com.playtika.piratedice.games.highdice.api;import com.google.gson.Gson;import com.playtika.piratedice.context.Banker;import com.playtika.piratedice.context.Player;import com.playtika.piratedice.core.database.BankersRepository;import com.playtika.piratedice.core.database.GamesRepository;import com.playtika.piratedice.core.database.PlayersRepository;import com.playtika.piratedice.core.database.model.Bankers;import com.playtika.piratedice.core.database.model.Games;import com.playtika.piratedice.core.database.model.Players;import com.playtika.piratedice.exception.DataBasesException;import com.playtika.piratedice.exception.GameException;import com.playtika.piratedice.exception.PlayerNotEnoughMoney;import com.playtika.piratedice.exception.PlayerNotMakeRatesExceptions;import com.playtika.piratedice.games.highdice.PlayGame;import com.playtika.piratedice.games.highdice.context.Game;import com.playtika.piratedice.util.Response;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Optional;@RestController@RequestMapping("/game/highDice")public class HighDiceController {    private static final Gson gson = new Gson();    @Autowired    private BankersRepository bankersRepository;    @Autowired    private GamesRepository gamesRepository;    @Autowired    private PlayersRepository playersRepository;    @GetMapping("/new")    public Response newGame(int playerId, int bankerId, int countRollDice) {        if (!bankersRepository.existsById(bankerId)) {            return new Response(false)                    .add("error", "banker not found");        }        if (!playersRepository.existsById(playerId)) {            return new Response(false)                    .add("error", "player not found");        }        Game game = new Game(playerId, bankerId, countRollDice);        Games games = new Games();        games.setGame(game);        gamesRepository.save(games);        return new Response().add("gameId", games.getId());    }    @GetMapping("/get")    public Response get(int gameId) {        return new Response().add("game", gson.toJson(getGamesById(gameId)));    }    @GetMapping("/list")    public Response list() {        return new Response().add("games", gson.toJson(gamesRepository.findAll()));    }    @GetMapping("/play")    public Response playGame(int gameId, int rates, int countRollDice) {        PlayGame playGame;        try {            playGame = createPlayGameById(gameId);            playGame.makeRates(rates);        } catch (DataBasesException | PlayerNotEnoughMoney e) {            return new Response(false)                    .add("error", e.getMessage());        }        Game game = playGame.getGame();        savePlayGameChanges(playGame, gameId);        return new Response()                .add("bankScore", playGame.getGame().getBankScore());    }    @GetMapping("/roll")    public Response playerRoll(int gameId) {        PlayGame playGame;        try {            playGame = createPlayGameById(gameId);            playGame.playerRollDice();        } catch (DataBasesException | GameException e) {            return new Response(false)                    .add("error", e.getMessage());        }        Game game = playGame.getGame();        savePlayGameChanges(playGame, gameId);        return new Response()                .add("playerWin", game.isPlayerWin())                .add("playerScore", game.getLastPlayerScore())                .add("countRollDice", game.getCountRollDice());    }    @GetMapping("/doubleRate")    public Response doubleRate(int gameId) {        PlayGame playGame;        try {            playGame = createPlayGameById(gameId);            playGame.playerDoubleRate();        } catch (DataBasesException | GameException | PlayerNotEnoughMoney | PlayerNotMakeRatesExceptions e) {            return new Response(false)                    .add("error", e.getMessage());        }        Game game = playGame.getGame();        savePlayGameChanges(playGame, gameId);        return new Response()                .add("playerWin", game.isPlayerWin())                .add("playerScore", game.getLastPlayerScore())                .add("countRollDice", game.getCountRollDice());    }    @GetMapping("/save")    public Response save(int gameId) {        PlayGame playGame;        try {            playGame = createPlayGameById(gameId);            playGame.playerSave();        } catch (DataBasesException | GameException | PlayerNotEnoughMoney | PlayerNotMakeRatesExceptions e) {            return new Response(false)                    .add("error", e.getMessage());        }        Game game = playGame.getGame();        savePlayGameChanges(playGame, gameId);        return new Response()                .add("playerWin", false)                .add("countRollDice", game.getCountRollDice());    }    @GetMapping("/end")    public Response end(int gameId) {        PlayGame playGame;        try {            playGame = createPlayGameById(gameId);            playGame.end();        } catch (DataBasesException | PlayerNotEnoughMoney e) {            return new Response(false)                    .add("error", e.getMessage());        }        savePlayGameChanges(playGame, gameId);        gamesRepository.deleteById(gameId);        return new Response();    }    private Player getPlayerById(int id) throws DataBasesException {        Optional<Players> players = playersRepository.findById(id);        if (players.isEmpty())            throw new DataBasesException("Player not found");        return players.get().getPlayer();    }    private Banker getBankerById(int id) throws DataBasesException {        Optional<Bankers> bankers = bankersRepository.findById(id);        if (bankers.isEmpty())            throw new DataBasesException("banker not found");        return bankers.get().getBanker();    }    private Game getGamesById(int id) throws DataBasesException {        Games games = gamesRepository.findById(id).orElse(null);        if (games == null)            throw new DataBasesException("game not found");        return games.getGame();    }    private PlayGame createPlayGameById(int id) throws DataBasesException {        Game games = getGamesById(id);        Player player = getPlayerById(games.getPlayerId());        Banker banker = getBankerById(games.getBankId());        return new PlayGame(player, banker, games);    }    private void savePlayGameChanges(PlayGame playGame, int gameId) {        Game game = playGame.getGame();        Games games = new Games();        games.updateGame(gameId, game);        gamesRepository.save(games);    }}