package com.playtika.piratedice.games.highdice;import com.playtika.piratedice.context.Banker;import com.playtika.piratedice.context.Player;import com.playtika.piratedice.exception.GameException;import com.playtika.piratedice.exception.PlayerNotEnoughMoney;import com.playtika.piratedice.exception.PlayerNotMakeRatesExceptions;import com.playtika.piratedice.games.highdice.context.Game;import lombok.Getter;import lombok.extern.slf4j.Slf4j;@Slf4j@Getterpublic class PlayGame {    private final Player player;    private final Banker banker;    private Game game;    public PlayGame(Player player, Banker banker, Game game) {        this.player = player;        this.banker = banker;        this.game = game;    }    public void makeRates(int playerRates) throws PlayerNotEnoughMoney {        banker.setBankerRates(playerRates);        try {            banker.addPlayerRates(player, game.getCountRollDice() * playerRates);        } catch (PlayerNotEnoughMoney e) {            log.error(e.getMessage());            throw e;        }        game.bankRollDice();    }    public void playerRollDice() throws GameException {        game.playerRollDice();        if (game.isPlayerWin())            game.setCountRollDice(0);    }    public void playerDoubleRate() throws PlayerNotEnoughMoney, PlayerNotMakeRatesExceptions {        banker.changePlayerRates(player, banker.getBankerRates() * 2);        game.setCountRollDice(1);        game.playerRollDice();    }    public void playerSave() throws PlayerNotEnoughMoney, PlayerNotMakeRatesExceptions {        Integer rate = banker.getPlayersRates().get(player.getId());        banker.changePlayerRates(player, rate / 2);        game.setCountRollDice(0);    }    public void end() throws PlayerNotEnoughMoney {        if (game.isPlayerWin())            banker.getAllRatesPlayer(player);        else            banker.getAllRatesBanker();    }}